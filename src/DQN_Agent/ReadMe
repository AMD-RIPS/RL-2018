This folder contains the necessary files to recreate the results in the final report submitted by RIPS AMD team. 


The following hyperparameters can be defined in the hyperparameters/setups.py:

target_update_frequency:
	-defines the number of frames between each target Q update;

batch_size:
	-defines the size of the mini-batch;

memory_capacity: 
	-defines the capacity for replay memory;

num_episodes:
	-defines the number of episodes the algorithm will train on before quitting;

learning_rate_drop_frame_limit: 
	-defines the number of frames the exploration rate decays from 1 to 0.1 over.


The following setting can also be defined in hyperparameters/setups.py:

'architecture'
	-defines the neural network architecture to train on 
	available architectures include: 
		-basic: two fully connected neural network layers with 32 neurons at each layer;
    	-conv1: one convolutional layer with 16 8x8 kernels with strides 4x4 followed by one dense layer with dropout;
    	-conv2: two convolutional layers, one with 16 8x8 kernels with strides 4x4, the second one with 32 4x4 kernels with strides 2x2, 		connected to one dense layer with dropout; 
    	-atari: the same network architecture used in the paper published by DeepMind in 2013
    	-nature: the same network architecture used in the nature paper published by DeepMind in 2015
    	-nature_batchnorm: based on the nature architecture, added batchnorm to each layer
    	-nature_dropout: based on the nature architecture, added dropout to the dense and output layer
    	-dropout_conv_layer: based on the nature architecture, added dropout to the second convolutional layer

explore_rate: 
	-defines the explore rate decay
	avaliable explore rate dacay option:
		-basic: decays from 0.5 to 0.1 linearly over num_episodes defined above
		-atari: decays from 0.6 to 0.1 linearly over learning_rate_drop_frame_limit defined above
		-decay: decays from 1 to 0.1 linearly over learning_rate_drop_frame_limit defined above
		-fixed: fixed to be 0.1

learning_rate:
	-defines the learning rate
	available learning rate option:
		-basic: decays from 0.005 to 0.001 over num_episodes defined above
		-atari: fixed to be 0.00025

The action space can be defined in environment.py, action_dict parameter, the default action space for the car racing game is [-1, 0, 0] (left turn), [1, 0, 0] (right turn), [0, 1, 0] (accelerate), [0, 0, 0.8] (decelerate) and [0, 0, 0] (no operation).

Once following the instruction in ../Environments/new_env_instructions.txt, there are three training environments available to choose from, which include random short tracks, fixed one track and fixed three track. The training environment can be defined in main.py. To train in random short tracks environment, uncomment line 19; to train in fixed one/three tracks environment, uncomment line 22 with seed = fixed_1track_seed/fixed_3track_seed. 

To start training, run the following command: 
python main.py <folder_name_for_saving_the_model>

The models and the tensorboard log will be saved in <folder_name_for_saving_the_model>. 